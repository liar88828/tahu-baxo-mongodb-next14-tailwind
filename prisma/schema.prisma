// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String    @unique
  expires      DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified Boolean         @default(false)
  image         String?         @default("https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg")
  phone         String
  address       String
  //
  role          String          @default("USER")
  token         String?         @unique
  password      String?
  otp           Int?
  expiresOtp    DateTime?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]
  // Trolley       Trolley         @relation(fields: [trolleyId], references: [id])
  // trolleyId     Int             @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductDB     ProductDB[]
  DeliveryDB    DeliveryDB[]
  BankDB        BankDB[]
  TrolleyDB     TrolleyDB[]
  PenerimaDB    PenerimaDB[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PenerimaDB {
  id            Int             @id @default(autoincrement())
  nama          String
  alamat        String
  hp            String
  TransactionDB TransactionDB[]

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model OrderanDB {
  id         String   @id @default(uuid())
  // orang
  dari       String
  pengirim   String
  hp         String
  // tanggal
  // pesan          DateTime
  // waktuKirim     DateTime
  // keterangan
  guna       String
  lokasi     String
  ongkir     Int
  // total
  // typePembayaran String
  // totalBayar     Int
  // totalPenjualan Int
  status     String
  // semua
  // at update / create
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  TransactionDB TransactionDB[]
}

model ProductDB {
  id         Int         @id @default(autoincrement())
  nama       String
  lokasi     String
  jenis      String
  img        String?     @default("https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg")
  harga      Int
  jumlah     Int
  keterangan String
  // at update / create
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  // TransactionDB          TransactionDB[]
  TrolleyDB  TrolleyDB[]
  User       User        @relation(fields: [userId], references: [id])
  userId     String
}

model DeliveryDB {
  id            Int             @id @default(autoincrement())
  nama          String          @unique
  hp            String
  lokasi        String
  jenis         String
  harga         Int
  img           String?         @default("https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg")
  keterangan    String
  TransactionDB TransactionDB[]
  User          User            @relation(fields: [userId], references: [id])
  userId        String
}

model BankDB {
  id            Int             @id @default(autoincrement())
  nama          String          @unique
  hp            String
  no            String
  lokasi        String
  jenis         String
  img           String?         @default("https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg")
  keterangan    String
  TransactionDB TransactionDB[]
  User          User            @relation(fields: [userId], references: [id])
  userId        String
}

model TransactionDB {
  id           Int         @id @default(autoincrement())
  jumlah       Int
  // ProductDB              ProductDB?               @relation(fields: [productDBId], references: [id])
  // productDBId            Int
  OrderanDB    OrderanDB?  @relation(fields: [orderanDBId], references: [id])
  orderanDBId  String
  PenerimaDB   PenerimaDB? @relation(fields: [penerimaDBId], references: [id])
  penerimaDBId Int
  DeliveryDB   DeliveryDB? @relation(fields: [deliveryDBId], references: [id])
  deliveryDBId Int
  BankDB       BankDB?     @relation(fields: [bankDBId], references: [id])
  bankDBId     Int
  TrolleyDB    TrolleyDB[]
}

// model Trolley {
//   id               Int                  @id @default(autoincrement())
//   TrolleyOnProduct TrolleyOnProductDB[]
//   User             User?
// }

model TrolleyDB {
  id            Int            @id @default(autoincrement())
  // Trolley     Trolley?   @relation(fields: [trolleyId], references: [id])
  // trolleyId   Int?
  User          User           @relation(fields: [userId], references: [id])
  userId        String
  Product       ProductDB?     @relation(fields: [productId], references: [id])
  productId     Int?
  Transaction   TransactionDB? @relation(fields: [transactionId], references: [id])
  transactionId Int?
  qty           Int
}
