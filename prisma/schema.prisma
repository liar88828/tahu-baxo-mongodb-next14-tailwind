// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  //
  role          String
  password      String?
  otp           Int?
  expiresOtp    DateTime?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model SemuaProduct {
  id         String   @id @default(uuid())
  nama       String
  lokasi     String
  jenis      String
  harga      Int
  jumlah     Int
  img        String
  // keterangan String
  // at update / create
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Orderan    Orderan? @relation(fields: [orderanId], references: [id])
  orderanId  String?

  // relational
  // Orderan    Orderan? @relation(fields: [orderanId], references: [id])
  // orderanId  String?  @unique
  @@map("SemuaProducts")
}

model Orderan {
  id             String         @id @default(uuid())
  // orang
  dari           String
  pengirim       String
  hpPengirim     String
  penerima       String
  alamatPenerima String
  hpPenerima     String
  // tanggal
  pesan          DateTime
  waktuKirim     DateTime
  // keterangan
  guna           String
  lokasi         String
  // travel
  namaPengiriman String
  ongkir         Int
  // total
  typePembayaran String
  totalBayar     Int
  totalPenjualan Int
  status         String
  // semua
  semuaProduct   SemuaProduct[]
  // at update / create
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("Orderans")
}

model Product {
  id         String   @id @default(uuid())
  nama       String   @unique
  lokasi     String
  jenis      String
  img        String
  harga      Int
  jumlah     Int
  keterangan String
  // at update / create
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("Products")
}

model Delivery {
  id         String @id @default(uuid())
  nama       String @unique
  hp         String
  lokasi     String
  jenis      String
  harga      Int
  img        String
  keterangan String

  @@map("Deliverys")
}

model Bank {
  id         String @id @default(uuid())
  nama       String @unique
  hp         String
  no         String
  lokasi     String
  jenis      String
  img        String
  keterangan String

  @@map("Banks")
}

//
// model SemuaProduct {
//   id         String   @id @default(uuid())
//   nama       String
//   lokasi     String
//   jenis      String
//   harga      Int
//   jumlah     Int
//   img        String
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   Orderan    Orderan? @relation(fields: [orderanId], references: [id])
//   orderanId  String?
//
//
//   @@map("SemuaProducts")
// }
//
// model Orderan {
//   id             String         @id @default(uuid())
//   dari           String
//   pengirim       String
//   hpPengirim     String
//   penerima       String
//   alamatPenerima String
//   hpPenerima     String
//   pesan          DateTime
//   waktuKirim     DateTime
//   guna           String
//   lokasi         String
//   namaPengiriman String
//   ongkir         Int
//   typePembayaran String
//   totalBayar     Int
//   totalPenjualan Int
//   status         String
//   semuaProduct   SemuaProduct[]
//   created_at     DateTime       @default(now())
//   updated_at     DateTime       @updatedAt
//
//   @@map("Orderans")
// }
